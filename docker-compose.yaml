services:
  rust-backend:
    build: rust/.
    tty: true
    stdin_open: true
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      AWS_URL: ${AWS_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DISCORD_OAUTH2_CLIENT_ID: ${DISCORD_OAUTH2_CLIENT_ID}
      DISCORD_OAUTH2_CLIENT_SECRET: ${DISCORD_OAUTH2_CLIENT_SECRET}
      S3_ART_BUCKET_NAME: ${S3_ART_BUCKET_NAME:-powerdown-art-storage}
      S3_CHARACTER_BUCKET_NAME: ${S3_CHARACTER_BUCKET_NAME:-powerdown-character-storage}
      S3_MISC_BUCKET_NAME: ${S3_MISC_BUCKET_NAME:-powerdown-miscellaneous-storange}
      S3_SQL_BACKUP_BUCKET_NAME: ${S3_SQL_BACKUP_BUCKET_NAME:-powerdown-sql-backups-storage}
      RUST_LOG: debug
    ports:
      - 8080:8080
  
  postgres:
    image: postgres:16
    shm_size: 256mb # Needs at least 128mb.
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: powerdown_db
      POSTGRES_USER: ${POSTGRES_USER}
      TZ: "Asia/Jerusalem"
    volumes:
    #  - pd_postgres:/var/lib/postgresql/data  # TODO: Uncomment once the db is ready
      - ./postgres/init:/docker-entrypoint-initdb.d
    # TODO: Delete the temporary volumes out once finished with development.
    tmpfs:
      - /var/lib/postgresql/data

  #ngnix:
  #  image: ngnix
volumes:
  localstack-data: